type Highschool = record {
  id : text;
  name : text;
  level : text;
  phone : text;
  county : text;
};
type HighschoolPayload = record {
  name : text;
  level_out_of_4 : float64;
  phone : text;
  county : text;
};
type Ministry = record { id : text; ministry : principal };
type Student = record {
  id : text;
  marks : float64;
  name : text;
  phone : text;
  highschool : Highschool;
  county : text;
};
type StudentPayload = record {
  name : text;
  phone : text;
  county : text;
  marks_out_of_1000 : float64;
};
type UpdateHighschoolPayload = record { id : text; level : text; phone : text };
type _AzleResult = variant { Ok : Highschool; Err : text };
type _AzleResult_1 = variant { Ok : Student; Err : text };
type _AzleResult_2 = variant { Ok : vec Highschool; Err : text };
type _AzleResult_3 = variant { Ok : Ministry; Err : text };
type _AzleResult_4 = variant { Ok : vec Student; Err : text };
service : () -> {
  addHighschool : (HighschoolPayload) -> (_AzleResult);
  addStudent : (StudentPayload) -> (_AzleResult_1);
  getAllHighschools : () -> (_AzleResult_2) query;
  getHighschool : (text) -> (_AzleResult) query;
  initMinistry : () -> (_AzleResult_3);
  searchHighschoolByCounty : (text) -> (_AzleResult_2) query;
  searchHighschoolByLevel : (float64) -> (_AzleResult_2) query;
  searchHighschoolByName : (text) -> (_AzleResult_2) query;
  searchStudentByName : (text) -> (_AzleResult_4) query;
  updateHighschool : (UpdateHighschoolPayload) -> (_AzleResult);
}